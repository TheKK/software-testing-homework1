* Triangle problem

  To make this assignment easier to impalement, let me assume that our function,
  caculateTriangleType, has following signature:

  TriangleType caculateTriangleType(int sideA, int sideB, int sideC)

  So basically, this function accepts three integers range from 1 to 200, and return
  an corresponding triangle type to the caller. Next, I'd like to write down some test
  cases created from the methods which mentioned in the class.

** Boundary values

   This function has three inputs with range from 1 to 200, its normal boundary value
   test case should be:

   *normal boundary (4 kinds x 3 variable = 12 test case)*

   | a |   1 |   2 | 199 | 200 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 |
   | b | 100 | 100 | 100 | 100 |   1 |   2 | 199 | 200 | 100 | 100 | 100 | 100 |
   | c | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 |   1 |   2 | 199 | 200 |

   and below are more test values to make it *robust boundary (12 + 2 * 3 variables)* by adding it into
   *normal boundary*

   | a |   0 | 201 | 100 | 100 | 100 | 100 |
   | b | 100 | 100 |   0 | 201 | 100 | 100 |
   | c | 100 | 100 | 100 | 100 |   0 | 201 |

   to reject the assumption that each variable are independent, let's convert our
   test cases into *worst case boundary(6 * 6 + )*, by adding more test case into *normal
   boundary*

   | a |   1 |   1 |   1 |   1 |
   | b |   1 |   2 | 199 | 200 |
   | c | 100 | 100 | 100 | 100 |

   | a |   2 |   2 |   2 |   2 |
   | b |   1 |   2 | 199 | 200 |
   | c | 100 | 100 | 100 | 100 |

   | a | 199 | 199 | 199 | 199 |
   | b |   1 |   2 | 199 | 200 |
   | c | 100 | 100 | 100 | 100 |

   | a | 200 | 200 | 200 | 200 |
   | b |   1 |   2 | 199 | 200 |
   | c | 100 | 100 | 100 | 100 |

   | a | 1 | 2 | 199 | 200 |
   | b | 1 | 1 |   1 |   1 |
   | c | 1 | 1 |   1 |   1 |

   | a | 1 | 2 | 199 | 200 |
   | b | 2 | 2 |   2 |   2 |
   | c | 1 | 1 |   1 |   1 |

   | a | 1 | 1 |   1 |   1 |
   | b | 1 | 1 |   1 |   1 |
   | c | 1 | 2 | 199 | 200 |

   | a | 1 | 1 |   1 |   1 |
   | b | 2 | 2 |   2 |   2 |
   | c | 1 | 2 | 199 | 200 |

   | a |   1 |   1 |   1 |   1 |
   | b | 199 | 199 | 199 | 199 |
   | c |   1 |   2 | 199 | 200 |

   | a |   1 |   1 |   1 |   1 |
   | b | 200 | 200 | 200 | 200 |
   | c |   1 |   2 | 199 | 200 |

   | a | 2 | 2 |   2 |   2 |
   | b | 1 | 1 |   1 |   1 |
   | c | 1 | 2 | 199 | 200 |

   | a | 2 | 2 |   2 |   2 |
   | b | 2 | 2 |   2 |   2 |
   | c | 1 | 2 | 199 | 200 |

   | a |   2 |   2 |   2 |   2 |
   | b | 199 | 199 | 199 | 199 |
   | c |   1 |   2 | 199 | 200 |

   | a |   2 |   2 |   2 |   2 |
   | b | 200 | 200 | 200 | 200 |
   | c |   1 |   2 | 199 | 200 |

   | a | 199 | 199 | 199 | 199 |
   | b |   1 |   1 |   1 |   1 |
   | c |   1 |   2 | 199 | 200 |

   | a | 199 | 199 | 199 | 199 |
   | b |   2 |   2 |   2 |   2 |
   | c |   1 |   2 | 199 | 200 |

   | a | 199 | 199 | 199 | 199 |
   | b | 199 | 199 | 199 | 199 |
   | c |   1 |   2 | 199 | 200 |

   | a | 199 | 199 | 199 | 199 |
   | b | 200 | 200 | 200 | 200 |
   | c |   1 |   2 | 199 | 200 |

   | a | 200 | 200 | 200 | 200 |
   | b |   1 |   1 |   1 |   1 |
   | c |   1 |   2 | 199 | 200 |

   | a | 200 | 200 | 200 | 200 |
   | b |   2 |   2 |   2 |   2 |
   | c |   1 |   2 | 199 | 200 |

   | a | 200 | 200 | 200 | 200 |
   | b | 199 | 199 | 199 | 199 |
   | c |   1 |   2 | 199 | 200 |

   | a | 200 | 200 | 200 | 200 |
   | b | 200 | 200 | 200 | 200 |
   | c |   1 |   2 | 199 | 200 |

   Phew, there's already lot of them. I know it kind of lazy to skip some of them but
   hey, the rest of them are _redundant_, right? So let me just skip them.

   Finally, let add more test case into *worst case boundary* and make it become
   *robust worst case bondary*!

   | a |   0 |   0 | 201 | 201 | 0 | 201 |   0 | 201 | 201 |
   | b |   0 | 201 |   0 | 201 | 0 |   0 | 201 | 201 | 201 |
   | c | 100 | 100 | 100 | 100 | 0 |   0 |   0 |   0 | 201 |

   Still, I skip most of them here since they're just in different order. That's all of
   them, folks!

** Equivalence class

   First thing to do is define *classes*. In triangle problem one possible way is to
   classify test case by the *result*, means:

    - C1 = {a, b, c, which form an equilateral triangle}
    - C2 = {a, b, c, which form an isosceles triangle}
    - C3 = {a, b, c, which form an scalene triangle}
    - C4 = {a, b, c, which unable to form an triangle}

   Well, fair enough for this case. Let's write them down:

   *Weak normal*
   | a | 42 | 42 | 42 | 42 |
   | b | 42 | 42 | 41 |  9 |
   | c | 42 | 10 | 10 |  9 |

   *Weak robust (unable to create test case in C1)*
   | a |  0 | 201 |  0 | 201 |
   | b | 42 |  42 | 42 |  42 |
   | c | 42 |  42 | 41 |  41 |

   *Strong normal (since our classes are all mutual exclusive, it's impossible to
   find any strong normal test case)*
   | a | x |
   | b | x |
   | c | x |

   *Strong robust*
   | a |  0 | 0 | 201 | 201 |
   | b |  0 | 0 | 201 | 201 |
   | c | 42 | 0 |  42 | 201 |

   That's it! Thanks to equivalence class, we can find out a set of test cases which
   represent all the others shown in boundary value section. I'm not saying boundary
   test is useless, but in triangle problem we don't have to use them *all*. Testing
   edge case is still important.

** Edge testing

   If we define our equivalence class as below:

    - C1 = {a: 1 <= a <= 200}
    - C2 = {b: 1 <= a <= 200}
    - C3 = {c: 1 <= a <= 200}

   then edge case would be the same as boundary value test and that's not what we expected.
   But when we define our class as:

    - C1 = {a, b, c, which form an equilateral triangle}
    - C2 = {a, b, c, which form an isosceles triangle}
    - C3 = {a, b, c, which form an scalene triangle}
    - C4 = {a, b, c, which unable to form an triangle}

   It's actually weird to find its *edge*. So I decide to skip edge testing analysis since
   it doen't look like an good method for triangle problem.

** Decision table

   Decision table is an great way to analysis triangle problem.

   | a < b + c      | T | T | T | T | T | T | T | T | T | T | F |
   | b < a + c      | T | T | T | T | T | T | T | T | T | F | - |
   | c < a + b      | T | T | T | T | T | T | T | T | F | - | - |
   |----------------+---+---+---+---+---+---+---+---+---+---+---|
   | a == b         | T | T | F | F | F | T | T | F | - | - | - |
   | b == c         | T | F | T | F | T | F | T | F | - | - | - |
   | a == c         | T | F | F | T | T | T | F | F | - | - | - |
   |----------------+---+---+---+---+---+---+---+---+---+---+---|
   | Equivalence    | o |   |   |   |   |   |   |   |   |   |   |
   | Isosceles      |   | o | o | o |   |   |   |   |   |   |   |
   | Scalene        |   |   |   |   |   |   |   | o |   |   |   |
   | Not a triangle |   |   |   |   |   |   |   |   | o | o | o |
   | Impossible     |   |   |   |   | o | o | o |   |   |   |   |

   With this table, we can easily create corresponding test cases:

   *Equivalence triangle*
   | a | 42 |
   | b | 42 |
   | c | 42 |

   *Isosceles triangle*
   | a | 42 | 42 |  3 |
   | b | 42 |  3 | 42 |
   | c |  3 | 42 | 42 |

   *Scalene triangle*
   | a | 3 |
   | b | 4 |
   | c | 5 |

   *Not a triangle*
   | a | 100 |   3 |   3 |
   | b |   4 | 100 |   3 |
   | c |   5 |   2 | 100 |

** Conclusion

   So after all analysis, let recap some properties triangle problem has:

     - parameter order doesn't matter, we only care able an *set* of value
     - function result is decided by relation of each input
     - invalid input exist

   Due to the properties shown and my experience going through all analysis process, it's
   not hard to find out that:

     - boundary test have **too** much redundant testcase
     - it's not intuitive to find equivalence class
     - edge test is hard be done as well
     - decision table work quite well

   In my humble opinion, doing decision table was totally fine but not sufficient. We still
   need some tests to valid how our function react to invalid input(s). My question here
   would be that *could we assume that all three inputs are independent* and we don't have
   go through every test shown in boundary value testing ?


* NextDate problem
** Boundary values

   Next date function is simple, give a certain date and it give you the next date:

   struct Date {
      int year, month, day;
   }

   Date nextDate(const Date& today);

   After knowing how this function works, let's defind what's valid/invalid values.

   year = {1..3000}
   month = {1..12}
   day = {1..31}

   I know the definition of *valid day* is weird but let it be for now. Using this input
   range, we can easily construct our boundary value test cases.

   *normal boundary*
   | year  | 2012 | 2012 | 2012 | 2012 | 2012 | 2012 | 2012 | 2012 | 2012 |
   | month |    7 |   10 |   10 |   10 |   10 |    1 |    2 |   11 |   12 |
   | day   |    7 |    1 |    2 |   30 |   31 |   10 |   10 |   10 |   10 |

   | year  |  1  |  2 | 2999 | 3000 |
   | month | 10  | 10 |   10 |   10 |
   | day   | 10  | 10 |   10 |   10 |

   *robust bondary*
   | year  |  0 | 3001 | 2012 | 2012 | 2012 | 2012 |
   | month | 10 |   10 |    0 |   13 |   10 |   10 |
   | day   | 10 |   10 |   10 |   10 |    0 |   32 |

   *worst case boundary*
   *(year + month)*
   | year  |  1 |  1 |  1 |  1 |  2 |  2 |  2 |  2 | 2999 | 2999 | 2999 | 2999 |
   | month |  1 |  2 | 11 | 12 |  1 |  2 | 11 | 12 |    1 |    2 |   11 |   12 |
   | day   | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 |   10 |   10 |   10 |   10 |

   | year  | 3000 | 3000 | 3000 | 3000 |
   | month |    1 |    2 |   11 |   12 |
   | day   |   10 |   10 |   10 |   10 |

   *(year + day)*
   | year  |  1 |  1 |  1 |  1 |  2 |  2 |  2 |  2 | 2999 | 2999 | 2999 | 2999 |
   | month | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 |   10 |   10 |   10 |   10 |
   | day   |  1 |  2 | 30 | 31 |  1 |  2 | 30 | 31 |    1 |    2 |   30 |   31 |

   | year  | 3000 | 3000 | 3000 | 3000 |
   | month |   10 |   10 |   10 |   10 |
   | day   |    1 |    2 |   30 |   31 |

   *(month + day)*
   | year  | 2012 | 2012 | 2012 | 2012 | 2012 | 2012 | 2012 | 2012 | 2012 | 2012 | 2012 | 2012 |
   | month |    1 |    1 |    1 |    1 |    2 |    2 |    2 |    2 |   11 |   11 |   11 |   11 |
   | day   |    1 |    2 |   30 |   31 |    1 |    2 |   30 |   31 |    1 |    2 |   30 |   31 |

   | year  | 2012 | 2012 | 2012 | 2012 |
   | month |   12 |   12 |   12 |   12 |
   | day   |    1 |    2 |   30 |   31 |

   *(year + month + day)*
   To be honest I don't want to do this... It doen't make sense to both you and me so let me
   skip this one.

   You can find that boundary value testing is not enough for next date problem and we need
   other kinds of testing to make our code more valuable.

** Equivalence class

   Let's classify our inputs shown below:

   m1 = { month has 30 days }
   m2 = { month has 31 days }
   m3 = { February }
   mx+ = { + invalid month }
   mx- = { - invalid month }

   d1 = { 1 <= day <= 28 }
   d2 = { day == 29 }
   d3 = { day == 30 }
   d4 = { day == 31 }
   md+ = { + invalid day }
   md- = { - invalid day }

   y1 = { leap year }
   y2 = { common year }
   yx+ = { + invalid year }
   yx- = { -invalid year }

   *weak normal*
   | year  | y1 | y1 | y1 | y2 |
   | month | m1 | m2 | m3 | m3 |
   | day   | d1 | d2 | d3 | d4 |

   *strong normal*
   | year  | y1 | y1 | y1 | y1 | y1 | y1 | y1 | y1 | y1 | y1 | y1 | y1 |
   | month | m1 | m1 | m1 | m1 | m2 | m2 | m2 | m2 | m3 | m3 | m3 | m3 |
   | day   | d1 | d2 | d3 | d4 | d1 | d2 | d3 | d4 | d1 | d2 | d3 | d4 |

   *weak robust*
   | year  | y1  | y2  | yx- | yx+ | yx+ | yx- | yx- | yx- | yx- |
   | month | mx+ | mx- | m1  | m2  | m3  | mx- | mx- | mx- | mx- |
   | day   | dx+ | dx- | dx- | dx+ | dx- | d1  | d2  | d3  | d4  |

   | year  | yx+ | yx+ | yx- |
   | month | mx+ | mx- | mx- |
   | day   | dx+ | dx- | dx- |

   *strong robust(I only write part of them...)*
   | year  | y- | y- | y- | y- | y- | y- |
   | month | m- | m- | m- | m- | m- | m- |
   | day   | d- | d1 | d2 | d3 | d4 | d+ |

   | year  | y- | y- | y- | y- | y- | y- |
   | month | m1 | m1 | m1 | m1 | m1 | m1 |
   | day   | d- | d1 | d2 | d3 | d4 | d+ |

   | year  | y- | y- | y- | y- | y- | y- |
   | month | m2 | m2 | m2 | m2 | m2 | m2 |
   | day   | d- | d1 | d2 | d3 | d4 | d+ |

   | year  | y- | y- | y- | y- | y- | y- |
   | month | m3 | m3 | m3 | m3 | m3 | m3 |
   | day   | d- | d1 | d2 | d3 | d4 | d+ |

   | year  | y- | y- | y- | y- | y- | y- |
   | month | m+ | m+ | m+ | m+ | m+ | m+ |
   | day   | d- | d1 | d2 | d3 | d4 | d+ |

** Edge testing

   I'll use the same class from equivalence class testing and modify it for our edge
   testing. here's it:

   *valid inputs*
   vm = { 1, 2, 3, 11, 12 }
   vd = { 1, 2, 27, 28, 29, 30, 31 }
   vy = { 1, 2, 2011, 2012, 2013, 2999, 3000 }

   *invalid inputs*
   im = { 0, 13 }
   id = { 0, 31 }
   iy = { 0, 3001 }

   Now we know that all the test cases are just their permutations, that's a good new to
   hear

   *weak normal*
   | year  | y1 | y1 | y1 | y2 |
   | month | m1 | m2 | m3 | m3 |
   | day   | d1 | d2 | d3 | d4 |

** Decision table

   Let's define *classifications* first:

   m2 = { February }
   m11 = { December }
   m30 = { month has 30 days }
   m31 = { month has 31 days except December }

   d = { 1 <= day <= 27 }
   d28 = { day == 28 }
   d29 = { day == 29 }
   d30 = { day == 30 }
   d31 = { day == 31 }

   yl = { leap year }
   yn = { common year }

   And here's our decision table:
   *February is the trickiest one, its day in month would be affected by year*
   | Year in ?        | -  | yn  | yl  | yn  | yl  | -   | -   |
   | Month in ?       | m2 | m2  | m2  | m2  | m2  | m2  | m2  |
   | Day in ?         | d  | d28 | d28 | d29 | d29 | d30 | d31 |
   |------------------+----+-----+-----+-----+-----+-----+-----|
   | Increment Year   |    |     |     |     |     |     |     |
   | Increment Month  |    | o   |     |     | o   |     |     |
   | Increment day    | o  |     | o   |     |     |     |     |
   | Reset to day one |    | o   |     |     | o   |     |     |
   | Reset to January |    |     |     |     |     |     |     |
   | Impossible       |    |     |     | o   |     | o   | o   |

   *Every month with 30 days*
   | Year in ?        | -   | -   | -   | -   | -   |
   | Month in ?       | m30 | m30 | m30 | m30 | m30 |
   | Day in ?         | d   | d28 | d29 | d30 | d31 |
   |------------------+-----+-----+-----+-----+-----|
   | Increment Year   |     |     |     |     |     |
   | Increment Month  |     |     |     |  o  |     |
   | Increment day    |  o  |  o  |   o |     |     |
   | Reset to day one |     |     |     |  o  |     |
   | Reset to January |     |     |     |     |     |
   | Impossible       |     |     |     |     |  o  |

   *Every month with 31 days except December*
   | Year in ?        | -   | -   | -   | -   | -   |
   | Month in ?       | m31 | m31 | m31 | m31 | m31 |
   | Day in ?         | d   | d28 | d29 | d30 | d31 |
   |------------------+-----+-----+-----+-----+-----|
   | Increment Year   |     |     |     |     |     |
   | Increment Month  |     |     |     |     | o   |
   | Increment day    | o   | o   | o   | o   |     |
   | Reset to day one |     |     |     |     | o   |
   | Reset to January |     |     |     |     |     |
   | Impossible       |     |     |     |     |     |

   *December*
   | Year in ?        | -   | -   | -   | -   | -   |
   | Month in ?       | m12 | m12 | m12 | m12 | m12 |
   | Day in ?         | d   | d28 | d29 | d30 | d31 |
   |------------------+-----+-----+-----+-----+-----|
   | Increment Year   |     |     |     |     | o   |
   | Increment Month  |     |     |     |     |     |
   | Increment day    | o   | o   | o   | o   |     |
   | Reset to day one |     |     |     |     | o   |
   | Reset to January |     |     |     |     | o   |
   | Impossible       |     |     |     |     |     |

** Conclusion

   Basically, the critical decision table we make almost fit how we implement our program
   and that's quite nice to see. It's clear that decision table fits well if our problem
   inputs are dependent and follow some rules, like next date problem.

   With the decision table to make keep on eye on our correctness, it's more robust if we
   combine it we edge test to find out if we handle *invalid* input properly.


* Commission problem
** Boundary values

   Let me define our commission function first. Our function accept three inputs, number of
   locks, number of stocks and number barrel, in range and price shown below:

   | parts name | range   | price |
   |------------+---------+-------|
   | locks      | 1 .. 70 | $45   |
   | stocks     | 1 .. 80 | $30   |
   | barrels    | 1 .. 90 | $25   |

   And here's how we calculate the final commission:

   | profit           | commission |
   |------------------+------------|
   | p <= $1000       |        10% |
   | 1000 < p =< 1800 |        15% |
   | 1800 < p         |        20% |

   So, it's time to find out our boundary and build boundary test case!

   | parts name | normal inputs | boundary inputs | robust inputs |
   |------------+---------------+-----------------+---------------|
   | locks      |            10 | 1, 2, 69, 70    | 0, 71         |
   | stocks     |            10 | 1, 2, 79, 80    | 0, 81         |
   | barrels    |            10 | 1, 2, 89, 90    | 0, 91         |

   *normal boundary*
   | locks   |  1 |  2 | 10 | 69 | 70 |
   | stocks  | 10 | 10 | 10 | 10 | 10 |
   | barrels | 10 | 10 | 10 | 10 | 10 |

   | locks   | 10 | 10 | 10 | 10 |
   | stocks  |  1 |  2 | 79 | 80 |
   | barrels | 10 | 10 | 10 | 10 |

   | locks   | 10 | 10 | 10 | 10 |
   | stocks  | 10 | 10 | 10 | 10 |
   | barrels |  1 |  2 | 89 | 90 |

   *robust boundary*
   | locks   |  0 | 71 | 10 | 10 | 10 | 10 |
   | stocks  | 10 | 10 |  0 | 81 | 10 | 10 |
   | barrels | 10 | 10 | 10 | 10 |  0 | 91 |

   *worst case test case*
   *(lock & stock)*
   | locks   |  1 |  1 |  1 |  1 |  2 |  2 |  2 |  2 | 69 | 69 | 69 | 69 | 70 | 70 | 70 | 70 |
   | stocks  |  1 |  2 | 79 | 80 |  1 |  2 | 79 | 80 |  1 |  2 | 79 | 80 |  1 |  2 | 79 | 80 |
   | barrels | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 |

   *(lock & barrel)*
   | locks   |  1 |  1 |  1 |  1 |  2 |  2 |  2 |  2 | 69 | 69 | 69 | 69 | 70 | 70 | 70 | 70 |
   | stocks  | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 |
   | barrels |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |

   *(stock & barrel)*
   | locks   | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 | 10 |
   | stocks  |  1 |  1 |  1 |  1 |  2 |  2 |  2 |  2 | 79 | 79 | 79 | 79 | 80 | 80 | 80 | 80 |
   | barrels |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |

   *(lock & stock & barrel)*
   | locks   | 1 | 1 |  1 |  1 | 1 | 1 |  1 |  1 |  1 |  1 |  1 |  1 |  1 |  1 |  1 |  1 |
   | stocks  | 1 | 1 |  1 |  1 | 2 | 2 |  2 |  2 | 79 | 79 | 79 | 79 | 80 | 80 | 80 | 80 |
   | barrels | 1 | 2 | 89 | 90 | 1 | 2 | 89 | 90 |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |

   | locks   | 2 | 2 |  2 |  2 | 2 | 2 |  2 |  2 |  2 |  2 |  2 |  2 |  2 |  2 |  2 |  2 |
   | stocks  | 1 | 1 |  1 |  1 | 2 | 2 |  2 |  2 | 79 | 79 | 79 | 79 | 80 | 80 | 80 | 80 |
   | barrels | 1 | 2 | 89 | 90 | 1 | 2 | 89 | 90 |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |

   | locks   | 69 | 69 | 69 | 69 | 69 | 69 | 69 | 69 | 69 | 69 | 69 | 69 | 69 | 69 | 69 | 69 |
   | stocks  |  1 |  1 |  1 |  1 |  2 |  2 |  2 |  2 | 79 | 79 | 79 | 79 | 80 | 80 | 80 | 80 |
   | barrels |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |

   | locks   | 70 | 70 | 70 | 70 | 70 | 70 | 70 | 70 | 70 | 70 | 70 | 70 | 70 | 70 | 70 | 70 |
   | stocks  |  1 |  1 |  1 |  1 |  2 |  2 |  2 |  2 | 79 | 79 | 79 | 79 | 80 | 80 | 80 | 80 |
   | barrels |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |  1 |  2 | 89 | 90 |

   *robust worst case*
   | locks   |  0 |  0 | 71 | 71 |
   | stocks  |  0 | 81 |  0 | 81 |
   | barrels | 10 | 10 | 10 | 10 |

   | locks   | 10 | 10 | 10 | 10 |
   | stocks  |  0 | 81 |  0 | 81 |
   | barrels |  0 | 91 |  0 | 91 |

   | locks   |  0 |  0 | 71 | 71 |
   | barrels | 10 | 10 | 10 | 10 |
   | barrels |  0 | 91 |  0 | 91 |

   | locks   | 0 |  0 | 71 | 71 |  0 |  0 | 71 | 71 |
   | stocks  | 0 | 81 |  0 | 81 |  0 | 81 |  0 | 81 |
   | barrels | 0 |  0 |  0 |  0 | 91 | 91 | 91 | 91 |

** Equivalence class
** Edge testing
** Decision table
** Conclusion
